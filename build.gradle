import com.google.gson.Gson
import com.google.gson.GsonBuilder

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'dev.galacticraft.mojarn' version '0.6.1+19'
//    id 'com.diffplug.spotless' version '7.2.0'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21


loom {
    accessWidenerPath = file("src/main/resources/powah.accesswidener")
}

base {
    archivesName = rootProject.archives_base_name
}

fabricApi {
    configureDataGeneration {
        outputDirectory = file("src/generated/resources")
        strictValidation = true
        createSourceSet = true
        modId = "powah-datagen"
    }
}

version = (System.getenv("POWAH_VERSION") ?: "v5.1.0").substring(1)
group = rootProject.maven_group

repositories {
    maven {
        name 'modmaven'
        url "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url 'https://maven.architectury.dev/'
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://maven.ladysnake.org/releases"
        content {
            includeGroup 'dev.onyxstudios.cardinal-components-api'
        }
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(mojarn.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2"))
    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    modImplementation("dev.architectury:architectury-fabric:${project.architectury_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc")
    }

    // Uncomment when we stop depending on REI internals
    //modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    // Choose REI, JEI or EMI
    //modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    //modRuntimeOnly("mezz.jei:jei-${project.jei_minecraft_release}-fabric:${project.jei_version}")
    modImplementation "dev.emi:emi-fabric:${project.emi_version}"

    include modApi('teamreborn:energy:4.1.0') {
        exclude(group: "net.fabricmc")
    }

    modCompileOnly "dev.emi:trinkets:${project.trinkets_version}"
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

processResources {
    Map<String, ?> properties = [
            version: project.version,

            // property replacement is a bit too eager
            class_1793: "\$class_1793",
    ]
    properties.forEach(inputs::property)

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

//spotless {
//    format 'misc', {
//        target '*.gradle', '*.md', '.gitignore'
//
//        trimTrailingWhitespace()
//        indentWithSpaces()
//        endWithNewline()
//    }
//    java {
//        target '**/*.java'
//        importOrder()
//
//        removeUnusedImports()
//
//        eclipse().configFile('eclipse-format.xml')
//
//        indentWithSpaces()
//        endWithNewline()
//        // TODO: Enforce license header one day
//        //licenseHeaderFile 'license_header.java'
//    }
//    format 'json', {
//        target '**/lang/*.json'
//        addStep(JsonOrderStep.create())
//    }
//}
//
//import com.diffplug.spotless.FormatterFunc
//import com.diffplug.spotless.FormatterStep
//
//final class JsonOrderStep {
//    private JsonOrderStep() {}
//    private static final Gson GSON = new GsonBuilder().disableHtmlEscaping().setLenient().setPrettyPrinting().create();
//
//    static FormatterStep create() {
//        return FormatterStep.create(
//                'jsonOrderStep',
//                new State(),
//                {
//                    new FormatterFunc() {
//                        String apply(String input) {
//                            TreeMap<String, Object> jsonMap = GSON.fromJson(input, TreeMap.class);
//                            String sortedJson = GSON.toJson(jsonMap);
//                            String prettyPrinted = sortedJson.replace('  "', '    "').replace('\\u0027', '\'');
//                            return prettyPrinted;
//                        }
//                    }
//                },
//        );
//    }
//
//    private static final class State implements Serializable {
//        private static final long serialVersionUID = 1L;
//
//        private final int formatVersion = 1;
//    }
//}
